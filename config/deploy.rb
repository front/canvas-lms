# config valid for current version and patch releases of Capistrano
lock '~> 3.10.0'

set :repo_url, 'git@github.com:front/canvas-lms.git'

# Default branch is :master
# ask :branch, `git rev-parse --abbrev-ref HEAD`.chomp

# Default value for :format is :airbrussh.
# set :format, :airbrussh

# You can configure the Airbrussh format using :format_options.
# These are the defaults.
# set :format_options, command_output: true, log_file: 'log/capistrano.log', color: :auto, truncate: :auto

# Default value for :pty is false
# set :pty, true

# Default value for :linked_files is []
append :linked_files, # 'config/amazon_s3.yml',
                      'config/cache_store.yml',
                      'config/database.yml',
                      'config/delayed_jobs.yml',
                      'config/domain.yml',
                      'config/logging.yml',
                      # 'config/dynamic_settings.yml',
                      # 'config/external_migration.yml',
                      # 'config/file_store.yml',
                      'config/outgoing_mail.yml',
                      'config/security.yml',
                      'config/redis.yml'

# Default value for linked_dirs is []
append :linked_dirs, 'log', 'tmp/pids', 'tmp/cache', 'tmp/sockets', 'tmp/files',
                     'public/system', 'vendor/bundle'

# Default value for default_env is {}
# set :default_env, { path: '/opt/ruby/bin:$PATH' }

# Default value for local_user is ENV['USER']
# set :local_user, -> { `git config user.name`.chomp }

# Default value for keep_releases is 5
set :keep_releases, 3

# Uncomment the following to require manually verifying the host key before first deploy.
# set :ssh_options, verify_host_key: :secure

# Bundles settings
# set it to nil for skipping the --path flag.
set :bundle_path, -> { shared_path.join('vendor/bundle') }
set :bundle_without, 'unuset'
set :bundle_flags, '--quiet' #

# Yarn settings (The task will run before deploy:updated)
set :yarn_target_path, -> { release_path }
set :yarn_flags, ''

before 'yarn:install', 'deploy:generate_assets'
after 'yarn:install', 'deploy:canvas_compile_assets'
after "deploy", "delayed_job:restart"

namespace :deploy do
  desc 'Generate Assets'
  task :generate_assets do
    on roles(:app) do
      execute :mkdir, release_path.join('public/assets')
      execute :mkdir, release_path.join('app/stylesheets/brandable_css_brands')
      execute :touch, release_path.join('app/stylesheets/_brandable_variables_defaults_autogenerated.scss')
    end
  end

  desc "Compile canvas assets"
  task :canvas_compile_assets do
    on roles(:app) do
      within release_path do
        with rails_env: 'production' do # always production (staging and production)
          execute :rake, "canvas:compile_assets" # or
          # execute :rake, "css:compile"
        end
      end
    end
  end

  desc "Generate and upload brand configs"
  task :brand_configs_generate_and_upload_all do
    on roles(:app) do
      within release_path do
        with rails_env: 'production' do # always production (staging and production)
          execute :rake, "brand_configs:generate_and_upload_all"
        end
      end
    end
  end
  after :canvas_compile_assets, :brand_configs_generate_and_upload_all

  desc "Restart app"
  after :publishing, :restart do
    on roles(:app) do
      invoke 'unicorn:restart'
    end
  end
end

namespace :bundler do
  desc 'Create Gemfile.lock'
  before :install, :create_gemfile_lock do
    on roles(:app) do
      execute :touch, release_path.join('Gemfile.lock')
    end
  end
end

namespace :delayed_job do
  desc 'Stop the delayed_job process'
  task :stop do
    on roles(:app) do
      within release_path do
        with rails_env: 'production' do # always production (staging and production)
          execute :bundle, :exec, 'script/delayed_job', :stop
        end
      end
    end
  end

  desc 'Start the delayed_job process'
  task :start do
    on roles(:app) do
      within release_path do
        with rails_env: 'production' do # always production (staging and production)
          execute :bundle, :exec, 'script/delayed_job', :start
        end
      end
    end
  end

  desc 'Restart the delayed_job process'
  task :restart do
    on roles(:app) do
      within release_path do
        with rails_env: 'production' do # always production (staging and production)
          execute :bundle, :exec, 'script/delayed_job', :restart
        end
      end
    end
  end
end
